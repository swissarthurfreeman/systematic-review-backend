%prod.quarkus.kubernetes-config.enabled=true
%prod.quarkus.kubernetes-config.secrets.enabled=true

quarkus.datasource.db-kind=postgresql
quarkus.hibernate-orm.database.generation=update

%dev.quarkus.datasource.db-kind = h2
%dev.quarkus.datasource.jdbc.url = jdbc:h2:mem:test
%test.quarkus.hibernate-orm.sql-load-script = import.sql
%dev.quarkus.hibernate-orm.database.generation = drop-and-create

%test.quarkus.datasource.db-kind = h2
%test.quarkus.datasource.jdbc.url = jdbc:h2:mem:test
%test.quarkus.hibernate-orm.database.generation = drop-and-create

# careful comments aren't supported security configuration
# allows us to curl at the above url.

%test.quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/

quarkus.keycloak.devservices.port=8180  
quarkus.oidc.client-id=backend
quarkus.oidc.credentials.secret=secret
quarkus.oidc.application-type=service
quarkus.oidc.authentication.user-info-required=true


# configuration de kafka, mÃªme que Jobert.
# quarkus.kafka.devservices.port=9092
kafka.bootstrap.servers=localhost:9092
mp.messaging.incoming.clustered_articles.connector=smallrye-kafka
mp.messaging.incoming.clustered_articles.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.clustered_articles.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.incoming.clustered_articles.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.incoming.clustered_articles.value.serializer=org.apache.kafka.common.serialization.StringSerializer
